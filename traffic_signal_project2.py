# -*- coding: utf-8 -*-
"""Traffic_Signal_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bQtRxowKV0x-XHvqVWoohqEo8jewN5dz
"""

import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import pandas as pd
import pandas.util.testing as tm
import seaborn as sns
import pickle 
import random

training_data = open('train.p','rb')
train = pickle.load(training_data)
training_data.close()

testing_data = open('test.p','rb')
test = pickle.load(testing_data)
testing_data.close()

validating_data = open('valid.p','rb')
valid = pickle.load(validating_data)
validating_data.close()

X_train, y_train= train['features'],  train['labels']
X_validation, y_validation= valid['features'],  valid['labels']
X_test, y_test= test['features'],  test['labels']

X_train.shape

y_train.shape

i=np.random.randint(1,len(X_train))
plt.imshow(X_train[i])
y_train[i]

w_grid=5
l_grid=5

fig,axes=plt.subplots(l_grid,w_grid,figsize=(10,10))
axes=axes.ravel()
n_training=len(X_train)

for i in np.arange(0,w_grid*l_grid):
  index=np.random.randint(0,n_training)

  axes[i].imshow(X_train[index])
  axes[i].set_title(y_train[index],fontsize=15)
  axes[i].axis('off')

plt.subplots_adjust(hspace=0.4)

from sklearn.utils import shuffle
X_train,y_train=shuffle(X_train,y_train)

X_train_gray=np.sum(X_train/3,axis=3,keepdims=True)
X_test_gray=np.sum(X_test/3,axis=3,keepdims=True)
X_validation_gray=np.sum(X_validation/3,axis=3,keepdims=True)
X_train_gray.shape
X_test_gray.shape
X_validation_gray.shape

X_train_gray_norm=(X_train_gray-128)/128
X_test_gray_norm=(X_test_gray-128)/128
X_validation_gray_norm=(X_validation_gray-128)/128

X_train_gray_norm

X_test_gray_norm

X_validation_gray_norm

i=random.randint(1,len(X_train_gray))
plt.imshow(X_train_gray[i].squeeze(),cmap='gray')
plt.figure()
plt.imshow(X_train[i])
plt.figure()
plt.imshow(X_train_gray_norm[i].squeeze(),cmap='gray')

from tensorflow.keras import datasets,layers,models

CNN = models.Sequential()

CNN.add(layers.Conv2D(6,(5,5),activation='relu',input_shape=(32,32,1)))
CNN.add(layers.AveragePooling2D())

CNN.add(layers.Dropout(0.2))

CNN.add(layers.Conv2D(16,(5,5),activation='relu'))
CNN.add(layers.AveragePooling2D())

CNN.add(layers.Flatten())

CNN.add(layers.Dense(120,activation='relu'))
CNN.add(layers.Dense(84,activation='relu'))
CNN.add(layers.Dense(43,activation='softmax'))
CNN.summary()

CNN.compile(optimizer='Adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history=CNN.fit(X_train_gray_norm,
                y_train,
                batch_size=500,
                epochs=50,
                verbose=1,
                validation_data=(X_validation_gray_norm,y_validation))

score=CNN.evaluate(X_test_gray_norm,y_test)
print('Test Accuracy:{}'.format(score[1]))

history.history.keys()

accuracy=history.history['accuracy']
val_accuracy=history.history['val_accuracy']
loss=history.history['loss']
val_loss=history.history['val_loss']

epochs=range(len(accuracy))
plt.plot(epochs,loss,'ro',label='Training loss')
plt.plot(epochs,val_loss,'r',label='Validation Loss')
plt.title('Training and Vlidation Loss')

epochs=range(len(accuracy))
plt.plot(epochs,accuracy,'ro',label='Training accuracy')
plt.plot(epochs,val_accuracy,'r',label='Validation accuracy')
plt.title('Training and Vlidation accuracy')

predicted_classes=CNN.predict_classes(X_test_gray_norm)
y_true=y_test

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_true,predicted_classes)
plt.figure(figsize=(25,25))
sns.heatmap(cm,annot=True)

l=5
w=5

fig, axes=plt.subplots(l,w,figsize=(12,12))
axes=axes.ravel()

for i in np.arange(0,l*w):
  axes[i].imshow(X_test[i])
  axes[i].set_title('Prediction={}\n True={}'.format(predicted_classes[i],y_true[i]))
  axes[i].axis('off')

plt.subplots_adjust(wspace=1)

!pip install pytesseract

!sudo apt install tesseract-ocr

!sudo apt install libtesseract-dev

import pytesseract as tess
from PIL import Image

img=Image.open('image_1.png')
text=tess.image_to_string(img)
print(text)

img=Image.open('image_2.png')
text=tess.image_to_string(img)
print(text)

img=Image.open('image_3.png')
text=tess.image_to_string(img)
print(text)

img=Image.open('image_4.png')
text=tess.image_to_string(img)
print(text)